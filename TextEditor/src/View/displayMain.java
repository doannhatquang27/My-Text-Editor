/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import say.swing.JFontChooser;

/**
 *
 * @author ASUS
 */
public class displayMain extends javax.swing.JFrame {
    private File currentFile = null;
    private String preString = "", postString = "";
    private String clipboard;
    private boolean isUndo = false, isCut = false, isCopy = false, isPaste = false;
    /**
     * Creates new form displayMain
     */
    public displayMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ReplacePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPost = new javax.swing.JTextField();
        btnReplace = new javax.swing.JButton();
        btnReplaceAll = new javax.swing.JButton();
        btnFindNext = new javax.swing.JButton();
        FindPanel = new javax.swing.JPanel();
        btnFindNext1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtPre1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtarea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuNew = new javax.swing.JMenuItem();
        mnuOpen = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        mnuSaveas = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuSelectAll = new javax.swing.JMenuItem();
        mnuCut = new javax.swing.JMenuItem();
        mnuCopy = new javax.swing.JMenuItem();
        mnuPaste = new javax.swing.JMenuItem();
        mnuUndo = new javax.swing.JMenuItem();
        mnuRedo = new javax.swing.JMenuItem();
        mnuFind = new javax.swing.JMenuItem();
        mnuReplace = new javax.swing.JMenuItem();
        mnuChangeFont = new javax.swing.JMenuItem();

        jLabel1.setText("Find what:");

        jLabel2.setText("Replace with:");

        btnReplace.setText("Replace");
        btnReplace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReplaceMouseClicked(evt);
            }
        });

        btnReplaceAll.setText("Replace All");
        btnReplaceAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReplaceAllMouseClicked(evt);
            }
        });

        btnFindNext.setText("Find Next");
        btnFindNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFindNextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ReplacePanelLayout = new javax.swing.GroupLayout(ReplacePanel);
        ReplacePanel.setLayout(ReplacePanelLayout);
        ReplacePanelLayout.setHorizontalGroup(
            ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReplacePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReplacePanelLayout.createSequentialGroup()
                        .addGroup(ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(ReplacePanelLayout.createSequentialGroup()
                                .addComponent(txtPost, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnReplace, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ReplacePanelLayout.createSequentialGroup()
                                .addComponent(txtPre, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnFindNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ReplacePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnReplaceAll)))
                .addContainerGap())
        );
        ReplacePanelLayout.setVerticalGroup(
            ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReplacePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtPre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnFindNext))
                .addGap(18, 18, 18)
                .addGroup(ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReplacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtPost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnReplace, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(btnReplaceAll)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        btnFindNext1.setText("Find Next");
        btnFindNext1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFindNext1MouseClicked(evt);
            }
        });

        jLabel3.setText("Find what:");

        javax.swing.GroupLayout FindPanelLayout = new javax.swing.GroupLayout(FindPanel);
        FindPanel.setLayout(FindPanelLayout);
        FindPanelLayout.setHorizontalGroup(
            FindPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FindPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(35, 35, 35)
                .addComponent(txtPre1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnFindNext1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FindPanelLayout.setVerticalGroup(
            FindPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FindPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FindPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtPre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnFindNext1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtarea.setColumns(20);
        txtarea.setRows(5);
        jScrollPane1.setViewportView(txtarea);

        jMenu1.setText("File");

        mnuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuNew.setText("New");
        mnuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewActionPerformed(evt);
            }
        });
        jMenu1.add(mnuNew);

        mnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuOpen.setText("Open");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnuOpen);

        mnuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSave.setText("Save");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSave);

        mnuSaveas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuSaveas.setText("Save as");
        mnuSaveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveasActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSaveas);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        mnuSelectAll.setText("Select all");
        mnuSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(mnuSelectAll);

        mnuCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuCut.setText("Cut");
        mnuCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCutActionPerformed(evt);
            }
        });
        jMenu2.add(mnuCut);

        mnuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mnuCopy.setText("Copy");
        mnuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopyActionPerformed(evt);
            }
        });
        jMenu2.add(mnuCopy);

        mnuPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        mnuPaste.setText("Paste");
        mnuPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPasteActionPerformed(evt);
            }
        });
        jMenu2.add(mnuPaste);

        mnuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuUndo.setText("Undo");
        mnuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUndoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuUndo);

        mnuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mnuRedo.setText("Redo");
        mnuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRedoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuRedo);

        mnuFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnuFind.setText("Find");
        mnuFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFindActionPerformed(evt);
            }
        });
        jMenu2.add(mnuFind);

        mnuReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        mnuReplace.setText("Replace");
        mnuReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuReplaceActionPerformed(evt);
            }
        });
        jMenu2.add(mnuReplace);

        mnuChangeFont.setText("Change font");
        mnuChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChangeFontActionPerformed(evt);
            }
        });
        jMenu2.add(mnuChangeFont);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewActionPerformed
        currentFile = null;
        txtarea.setText("");
    }//GEN-LAST:event_mnuNewActionPerformed

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(jScrollPane1);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            currentFile = selectedFile;
//            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            FileReader fr;
            BufferedReader br;
            try {
                fr = new FileReader(selectedFile);
                br = new BufferedReader(fr);
                
                String str;
                
                txtarea.setText("");
                while ((str = br.readLine()) != null) {
                    txtarea.append(str);
                    txtarea.append("\n");
                }
                
                preString = txtarea.getText();
                isCopy = false; isCut = false; isPaste = false; isUndo = false;
                br.close(); fr.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(displayMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(displayMain.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_mnuOpenActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectAllActionPerformed
        txtarea.selectAll();
    }//GEN-LAST:event_mnuSelectAllActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        if (currentFile != null) {
            File fileName = currentFile;
            writeToFile(fileName);
        } else {
            saveAs();
        }
    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuSaveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveasActionPerformed
        saveAs();
    }//GEN-LAST:event_mnuSaveasActionPerformed

    private void mnuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCutActionPerformed
        String temp = txtarea.getSelectedText();
        clipboard = temp;
        String afterCutString = txtarea.getText().substring(0, txtarea.getSelectionStart()) 
                + txtarea.getText().substring(txtarea.getSelectionEnd(), txtarea.getText().length());
        
        preString = txtarea.getText();
        txtarea.setText(afterCutString);
        isCut = true;
    }//GEN-LAST:event_mnuCutActionPerformed

    private void mnuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopyActionPerformed
        String temp = txtarea.getSelectedText();
        clipboard = temp;
        isCopy = true;
    }//GEN-LAST:event_mnuCopyActionPerformed

    private void mnuPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPasteActionPerformed
        preString = txtarea.getText();
        txtarea.insert(clipboard, txtarea.getSelectionStart());
        isPaste = true;
    }//GEN-LAST:event_mnuPasteActionPerformed

    private void mnuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUndoActionPerformed
        if (isCopy || isCut || isPaste || isType()) {
            postString = txtarea.getText();
            txtarea.setText(preString);
            isUndo = true;
        }
    }//GEN-LAST:event_mnuUndoActionPerformed

    private void mnuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRedoActionPerformed
        if (isUndo) txtarea.setText(postString);
    }//GEN-LAST:event_mnuRedoActionPerformed

    private void mnuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFindActionPerformed
        int option = JOptionPane.showConfirmDialog(this, FindPanel, "Find", JOptionPane.OK_CANCEL_OPTION);
    }//GEN-LAST:event_mnuFindActionPerformed

    private void mnuReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReplaceActionPerformed
        int option = JOptionPane.showConfirmDialog(this, ReplacePanel, "Replace", JOptionPane.OK_CANCEL_OPTION);
//        if (option == JOptionPane.OK_OPTION) {
//            System.out.println(txtPre.getText());
//            System.out.println(txtPost.getText());
//        }
    }//GEN-LAST:event_mnuReplaceActionPerformed

    private void btnReplaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReplaceMouseClicked
        String findedText = txtPre.getText().trim();
        int position = txtarea.getSelectionStart();
        int from = txtarea.getSelectionStart();
        int to = txtarea.getSelectionStart() + findedText.length();
        if (from >= txtarea.getText().length() || to >= txtarea.getText().length()) {
            JOptionPane.showMessageDialog(this, "Cannot find: '" + txtPre.getText() + "'");
        } else {
            if (!txtarea.getText().substring(from, to).equals(findedText)) {
                findNext(findedText);
            } else {
                String afterCutString = txtarea.getText().substring(0, from)
                        + txtarea.getText().substring(to, txtarea.getText().length());
                txtarea.setText(afterCutString);

                txtarea.insert(txtPost.getText().trim(), position);
                txtarea.setSelectionStart(to);
                txtarea.setSelectionEnd(to);
                findNext(findedText);
            }
        }
    }//GEN-LAST:event_btnReplaceMouseClicked

    private void btnFindNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFindNextMouseClicked
        String findedText = txtPre.getText().trim();
        findNext(findedText);
    }//GEN-LAST:event_btnFindNextMouseClicked

    private void btnReplaceAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReplaceAllMouseClicked
        String findedText = txtPre.getText().trim();
        String replaceText = txtPost.getText().trim();
        
        int position = 0, index;
        while (txtarea.getText().indexOf(findedText, position) != -1) {
            index = txtarea.getText().indexOf(findedText, position);
            int from = index;
            int to = index + findedText.length();

            txtarea.select(from, to);
            String afterCutString = txtarea.getText().substring(0, from) 
                    + txtarea.getText().substring(to, txtarea.getText().length());
            txtarea.setText(afterCutString);
        
            txtarea.insert(replaceText, index);
            position = index + 1;
        }
    }//GEN-LAST:event_btnReplaceAllMouseClicked

    private void btnFindNext1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFindNext1MouseClicked
        String findedText = txtPre1.getText().trim();
        findNext(findedText);
    }//GEN-LAST:event_btnFindNext1MouseClicked

    private void mnuChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChangeFontActionPerformed
        JFontChooser fontChooser = new JFontChooser();
        int result = fontChooser.showDialog(jScrollPane1);
        if (result == JFontChooser.OK_OPTION) {
            Font font = fontChooser.getSelectedFont();
            txtarea.setFont(font);
        }
    }//GEN-LAST:event_mnuChangeFontActionPerformed

    public void writeToFile(File fileName) {
        FileWriter fw;
        BufferedWriter bw;
        try {
            fw = new FileWriter(fileName);
            bw = new BufferedWriter(fw);
            bw.write(txtarea.getText());
            
            preString = txtarea.getText();
            isCopy = false; isCut = false; isPaste = false; isUndo = false;
            
            bw.close(); fw.close();
        } catch (IOException ex) {
            Logger.getLogger(displayMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void findNext(String findedText) {
        int position = txtarea.getSelectionEnd(), index;
        
        index = txtarea.getText().indexOf(findedText, position);
        if (index != -1) {
            txtarea.select(index, index + findedText.length());
            txtarea.setSelectedTextColor(Color.LIGHT_GRAY);
        } else {
            JOptionPane.showMessageDialog(this, "Cannot find: '" + findedText + "'");
        }
    }
    
    public void saveAs() {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = chooser.showOpenDialog(jScrollPane1);
        if (result == JFileChooser.APPROVE_OPTION) {
            String fileName = JOptionPane.showInputDialog("Enter your file name: ");
            File newFile = new File(chooser.getSelectedFile() + "\\" + fileName + ".txt");
            try {
                boolean isCreated = newFile.createNewFile();
                if (isCreated) {
                    writeToFile(newFile);
                } else {
                    System.out.println("File already exists.");
                }
            } catch (IOException ex) {
                Logger.getLogger(displayMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public boolean isType() {
        return (!preString.equals(txtarea.getText()));           
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(displayMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(displayMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(displayMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(displayMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new displayMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FindPanel;
    private javax.swing.JPanel ReplacePanel;
    private javax.swing.JButton btnFindNext;
    private javax.swing.JButton btnFindNext1;
    private javax.swing.JButton btnReplace;
    private javax.swing.JButton btnReplaceAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnuChangeFont;
    private javax.swing.JMenuItem mnuCopy;
    private javax.swing.JMenuItem mnuCut;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuFind;
    private javax.swing.JMenuItem mnuNew;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuPaste;
    private javax.swing.JMenuItem mnuRedo;
    private javax.swing.JMenuItem mnuReplace;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenuItem mnuSaveas;
    private javax.swing.JMenuItem mnuSelectAll;
    private javax.swing.JMenuItem mnuUndo;
    private javax.swing.JTextField txtPost;
    private javax.swing.JTextField txtPre;
    private javax.swing.JTextField txtPre1;
    private javax.swing.JTextArea txtarea;
    // End of variables declaration//GEN-END:variables
}










//Find function
//        String findedText = JOptionPane.showInputDialog("Find: ");
//        int position = 0, index;
//        while (txtarea.getText().indexOf(findedText, position) != -1) {
//            index = txtarea.getText().indexOf(findedText, position);
//            System.out.println(txtarea.getText().indexOf(findedText, position));
//            position = txtarea.getText().indexOf(findedText, position) + 1;
//            
//            txtarea.select(index, index + findedText.length());
//            txtarea.setSelectedTextColor(Color.LIGHT_GRAY);
//            if (txtarea.getText().indexOf(findedText, position) != -1) {
//                int option = JOptionPane.showConfirmDialog(this, "Find next");
//                if (option != 0) break;
//            }
//        }